//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.8.1
//     from Assets/Scripts/KeyboardAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;
using UnityEngine;

public partial class @KeyboardAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @KeyboardAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""KeyboardAction"",
    ""maps"": [
        {
            ""name"": ""CraneMovement"",
            ""id"": ""fc1be150-a6ff-4db3-b3e2-3b796e485ebc"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""5c5c4206-f34b-4ef7-9784-6fef425aa45b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Attach"",
                    ""type"": ""Button"",
                    ""id"": ""bcb8b2e8-993a-49f5-8c7d-35e322ddb2b2"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HookMovement"",
                    ""type"": ""Value"",
                    ""id"": ""e981c3b4-974f-43d6-8f6e-fd766b579d61"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""fc5a8247-c5d1-4bcc-8e61-1bdf8f6bc2f5"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""2f72f777-958e-420d-babd-957b51d2570c"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""52fb50cd-0265-4c18-9532-085458383808"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f596cbbd-884e-4061-8ef0-316d7a59d312"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""6d015ce7-79a6-45bd-9afe-c873d7f1e9de"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""61571d8d-0b15-4e14-afb0-3a907b73aa06"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attach"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""3953b145-6ab8-4d6a-b66c-370da95fef7b"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HookMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""17a64ac8-51af-49a4-927b-e4c7260a2e2a"",
                    ""path"": ""<Keyboard>/numpad2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HookMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""893de2fe-4e1d-4278-b76d-51b3735079ea"",
                    ""path"": ""<Keyboard>/numpad1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HookMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // CraneMovement
        m_CraneMovement = asset.FindActionMap("CraneMovement", throwIfNotFound: true);
        m_CraneMovement_Move = m_CraneMovement.FindAction("Move", throwIfNotFound: true);
        m_CraneMovement_Attach = m_CraneMovement.FindAction("Attach", throwIfNotFound: true);
        m_CraneMovement_HookMovement = m_CraneMovement.FindAction("HookMovement", throwIfNotFound: true);
    }

    ~@KeyboardAction()
    {
        Debug.Assert(!m_CraneMovement.enabled, "This will cause a leak and performance issues, KeyboardAction.CraneMovement.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CraneMovement
    private readonly InputActionMap m_CraneMovement;
    private List<ICraneMovementActions> m_CraneMovementActionsCallbackInterfaces = new List<ICraneMovementActions>();
    private readonly InputAction m_CraneMovement_Move;
    private readonly InputAction m_CraneMovement_Attach;
    private readonly InputAction m_CraneMovement_HookMovement;
    public struct CraneMovementActions
    {
        private @KeyboardAction m_Wrapper;
        public CraneMovementActions(@KeyboardAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_CraneMovement_Move;
        public InputAction @Attach => m_Wrapper.m_CraneMovement_Attach;
        public InputAction @HookMovement => m_Wrapper.m_CraneMovement_HookMovement;
        public InputActionMap Get() { return m_Wrapper.m_CraneMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CraneMovementActions set) { return set.Get(); }
        public void AddCallbacks(ICraneMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_CraneMovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CraneMovementActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Attach.started += instance.OnAttach;
            @Attach.performed += instance.OnAttach;
            @Attach.canceled += instance.OnAttach;
            @HookMovement.started += instance.OnHookMovement;
            @HookMovement.performed += instance.OnHookMovement;
            @HookMovement.canceled += instance.OnHookMovement;
        }

        private void UnregisterCallbacks(ICraneMovementActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Attach.started -= instance.OnAttach;
            @Attach.performed -= instance.OnAttach;
            @Attach.canceled -= instance.OnAttach;
            @HookMovement.started -= instance.OnHookMovement;
            @HookMovement.performed -= instance.OnHookMovement;
            @HookMovement.canceled -= instance.OnHookMovement;
        }

        public void RemoveCallbacks(ICraneMovementActions instance)
        {
            if (m_Wrapper.m_CraneMovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICraneMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_CraneMovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CraneMovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CraneMovementActions @CraneMovement => new CraneMovementActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface ICraneMovementActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnAttach(InputAction.CallbackContext context);
        void OnHookMovement(InputAction.CallbackContext context);
    }
}
